let v = function(x) {
    return x*2
}
console.log(v(15))

//---------------------------

// Fun√ß√£o tradicional
function dobrar(x) {
    return x * 2;
}

// Arrow Function equivalente
const dobrar = (x) => x * 2;

const quadrado = x => x * x;
console.log(quadrado(4)); // Sa√≠da: 16

const somar = (a, b) => a + b;
console.log(somar(3, 7)); // Sa√≠da: 10

const saudacao = (nome) => {
    return `Ol√°, ${nome}!`;
};
console.log(saudacao("Dennys")); // Sa√≠da: Ol√°, Dennys!

const triplo = x => x * 3;
console.log(triplo(3)); // Sa√≠da: 9

/*

O this no Arrow Function

O Arrow Function n√£o cria seu pr√≥prio this, ele herda o this do escopo onde foi definido.
J√° a fun√ß√£o tradicional cria seu pr√≥prio this.

*/

const pessoa = {
    nome: "Dennys",
    saudacaoTradicional: function () {
        console.log("Ol√°, " + this.nome);
    },
    saudacaoArrow: () => {
        console.log("Ol√°, " + this.nome);
    }
};

pessoa.saudacaoTradicional(); // Sa√≠da: Ol√°, Dennys
pessoa.saudacaoArrow(); // Sa√≠da: Ol√°, undefined

/*

saudacaoTradicional() usa function, ent√£o this.nome refere-se ao objeto pessoa.
saudacaoArrow() usa =>, ent√£o o this n√£o √© do objeto pessoa, mas sim do escopo onde foi definida (que pode ser undefined ou window).



Conclus√£o
O Arrow Function (=>) √© uma maneira mais curta e moderna de criar fun√ß√µes.
Ele n√£o cria seu pr√≥prio this, herdando o escopo pai.
Funciona muito bem para fun√ß√µes curtas, callbacks e m√©todos de array (map, filter, reduce).

*/

// üöÄ Exemplo pr√°tico com map():

const numeros = [1, 2, 3, 4];
const dobrados = numeros.map(n => n * 2);
console.log(dobrados); // Sa√≠da: [2, 4, 6, 8]